//Thread.js 0.21 https://github.com/MMilan0107/ThreadJS | license: https://gnu.org/licenses GPL version 3 or later
const Thread={};!function(){"use strict";if("undefined"==typeof Worker)throw Error("Worker is not supported in your browser.");Thread.Allocate=function(r){if("maxcpu"===(r+"").toLowerCase()&&(r=navigator.hardwareConcurrency),"number"!=typeof r||r<=0)throw Error("Thread amount invalid.");if(void 0!==Thread.worker1)throw Error("You already allocated.");r|=0;var e="worker";Thread.return=function(){};for(let o=1;o<r+1;o++)Thread[e+o]={run:function(r){return void 0!==Thread[e+o].__url&&(URL.revokeObjectURL(Thread[e+o].__url),Thread[e+o].__work.terminate()),Thread[e+o].__url=(window.URL||window.webkitURL).createObjectURL(new Blob(["onmessage="+r.toString()+"\nvar Thread={return:(e)=>postMessage(e)};Object.freeze(Thread)"],{type:"text/javascript"})),Thread[e+o].__work=new Worker(Thread[e+o].__url),Thread[e+o].__work.postMessage(0),new Promise((r,a)=>{Thread[e+o].__work.onmessage=function(e){r(e.data)},Thread[e+o].__work.onerror=function(r){console.error(e+o+" failed:"),a("Worker Error")}})},close:function(){try{Thread[e+o].__work.terminate()}catch(r){}URL.revokeObjectURL(Thread[e+o].__url),delete Thread[e+o]}};Thread.Closeall=function(){try{for(let o=1;o<r+1;o++)Thread[e+o].close()}catch(r){}}}}();
