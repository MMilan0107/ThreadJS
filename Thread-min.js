//Thread.js 0.32 github.com/MMilan0107/ThreadJS | license: gnu.org/licenses GPL version 3 or later
const Thread={};!function(){"use strict";if("undefined"==typeof Worker)throw"Worker is not supported in your browser.";Thread.Open=function(t){if("number"!=typeof(t="maxcpu"===(t+"").toLowerCase()?navigator.hardwareConcurrency:t)||t<=0)throw"Thread amount invalid.";t|=0;var n="__worker";Thread.return=function(){};for(let o=1;o<t+1;o++)Thread[n+o]={run:function(e){return this.hasOwnProperty("__work")&&((window.URL||window.webkitURL).revokeObjectURL(this.__url),this.__work.terminate()),this.__url=(window.URL||window.webkitURL).createObjectURL(new Blob(["onmessage="+e.toString()+"\nvar Thread={return:(e)=>postMessage(e)};Object.freeze(Thread)"],{type:"text/javascript"})),this.__work=new Worker(this.__url),this.__work.postMessage(0),new Promise((r,t)=>{this.__work.onmessage=function(e){r(e.data)},this.__work.onerror=function(e){t("Worker("+o+") Error")}})},close:function(){try{Thread[n+o].__work.terminate()}catch(e){}(window.URL||window.webkitURL).revokeObjectURL(Thread[n+o].__url),delete Thread[n+o]}};Thread.Worker=function(e){return Thread[n+e]},Thread.Close=function(r){if("string"!=typeof r&&"object"!=typeof r)throw"Invalid parameter.";if("all"===(r+"").toLowerCase())for(let e=1;e<t+1;e++)try{Thread[n+e].close()}catch(r){}else r.forEach(e=>{Thread[n+Number(e)].close()})}}}();