//Thread.js 0.31 github.com/MMilan0107/ThreadJS | license: gnu.org/licenses GPL version 3 or later
const Thread={};!function(){"use strict";if("undefined"==typeof Worker)throw Error("Worker is not supported in your browser.");Thread.Open=function(r){if("maxcpu"===(r+"").toLowerCase()&&(r=navigator.hardwareConcurrency),"number"!=typeof r||r<=0)throw Error("Thread amount invalid.");r|=0;var e="__worker";Thread.return=function(){};for(let o=1;o<r+1;o++)Thread[e+o]={run:function(r){return void 0!==Thread[e+o].__url&&((window.URL||window.webkitURL).revokeObjectURL(Thread[e+o].__url),Thread[e+o].__work.terminate()),Thread[e+o].__url=(window.URL||window.webkitURL).createObjectURL(new Blob(["onmessage="+r.toString()+"\nvar Thread={return:(e)=>postMessage(e)};Object.freeze(Thread)"],{type:"text/javascript"})),Thread[e+o].__work=new Worker(Thread[e+o].__url),Thread[e+o].__work.postMessage(0),new Promise((r,t)=>{Thread[e+o].__work.onmessage=function(e){r(e.data)},Thread[e+o].__work.onerror=function(r){t("Worker("+o+") Error")}})},close:function(){try{Thread[e+o].__work.terminate()}catch(r){}(window.URL||window.webkitURL).revokeObjectURL(Thread[e+o].__url),delete Thread[e+o]}};Thread.Worker=function(r){return Thread[e+r]},Thread.Close=function(o){if("string"!=typeof o&&"object"!=typeof o)throw Error("Invalid prarmeter.");if("all"===(o+"").toLowerCase())for(let t=1;t<r+1;t++)try{Thread[e+t].close()}catch(o){}else o.forEach(r=>{Thread[e+Number(r)].close()})}}}();
