//Thread.js v0.1 (https://github.com/MMilan0107/ThreadJS) | license https://gnu.org/licenses GPL version 3 or later
const Thread={};!function(){"use strict";if("undefined"==typeof Worker)throw Error("Worker is not supported in your browser.");Thread.Allocate=function(e){if("string"==typeof e&&"maxcpu"===e.toLowerCase()&&(e=navigator.hardwareConcurrency),"number"!=typeof e||e<=0)throw Error("Thread amount must be a positive integer.");if(void 0!==Thread.worker1)throw Error("You can only allocate once.");e|=0;var r="worker";Thread.return=(()=>{});for(let o=1;o<e+1;o++)Thread[r+o]={run:function(e){return void 0!==Thread[r+o].__url&&(URL.revokeObjectURL(Thread[r+o].__url),Thread[r+o].__work.terminate()),Thread[r+o].__url=(window.URL||window.webkitURL).createObjectURL(new Blob(["onmessage="+e.toString()+"\nvar Thread={return:(e)=>postMessage(e)};Object.freeze(Thread)"],{type:"text/javascript"})),Thread[r+o].__work=new Worker(Thread[r+o].__url),Thread[r+o].__work.postMessage(0),new Promise((e,t)=>{Thread[r+o].__work.onmessage=function(r){e(r.data)},Thread[r+o].__work.onerror=function(e){console.log(r+o+" failed:")}})},close:()=>{try{Thread[r+o].__work.terminate()}catch(e){}URL.revokeObjectURL(Thread[r+o].__url),delete Thread[r+o]}};Thread.Closeall=(()=>{for(let r=1;r<e+1;r++)Thread["worker"+r].close()})}}();